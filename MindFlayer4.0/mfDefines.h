/********************************************************************/
/**
* @LC	    10/10/2019
* @file   mfDefines.cpp
* @Author
* @date   10/10/2019
* @brief  Engine desc defines. The porpoise of this header is to define all the 
          needed desc to work between graphic API's
* @bug	  No known bugs.
*/
/********************************************************************/

/************************************************************************/
/* Headers                                                              */
/************************************************************************/
#pragma once
/**
 * @brief  Use DirectX
 */
#include <iostream>
#include <vector>
#include <string>
#if !defined(mfDIRECTX)
  #define mfDIRECTX
  #include <d3d11.h>
  #include <d3dx11.h>
  #include <d3dcompiler.h>
  #include <xnamath.h>
  #include "resource.h"
#endif
  //#define mfOPENGL
  #include <windows.h>

using namespace std;
/**
 * @brief : Structure that allocates the position and tex coords of a mesh.
 */
struct SimpleVertex
{
  XMFLOAT3 Pos;
  XMFLOAT2 Tex;
  XMFLOAT3 Nor;
  XMFLOAT3 Tan;
};
struct CBNeverChanges
{
  XMMATRIX mView;
};

struct CBChangeOnResize
{
  XMMATRIX mProjection;
};

struct CBChangesEveryFrame
{
  XMMATRIX mWorld;
  XMFLOAT4 vMeshColor;
};

/**
 * @brief  Identifies expected resource use during rendering. The usage \
           directly reflects whether a resource is accessible by the CPU and/or 
           the graphics processing unit (GPU).
 */
enum mf_USAGE
{
  mf_USAGE_DEFAULT = 0,
  mf_USAGE_IMMUTABLE = 1,
  mf_USAGE_DYNAMIC = 2,
  mf_USAGE_STAGING = 3,
  mf_USAGE_RENDER_TARGET_OUTPUT
};

/**
 * @brief  Identifies how to bind a resource to the pipeline.
 */
enum mf_BIND_FLAG
{
  mf_BIND_VERTEX_BUFFER = 0x1L,
  mf_BIND_INDEX_BUFFER = 0x2L,
  mf_BIND_CONSTANT_BUFFER = 0x4L,
  mf_BIND_SHADER_RESOURCE = 0x8L,
  mf_BIND_STREAM_OUTPUT = 0x10L,
  mf_BIND_RENDER_TARGET = 0x20L,
  mf_BIND_DEPTH_STENCIL = 0x40L,
  mf_BIND_UNORDERED_ACCESS = 0x80L
};

/**
 * @brief  Specifies the types of CPU access allowed for a resource.
 */
enum mf_CPU_ACCESS_FLAG 
{
  mf_CPU_ACCESS_WRITE = 0,
  mf_CPU_ACCESS_READ = 1
};

/**
 * @brief  Identifies options for resources.
 */ 
enum mf_RESOURCE_MISC_FLAG 
{
  mf_RESOURCE_MISC_GENERATE_MIPS,
  mf_RESOURCE_MISC_SHARED,
  mf_RESOURCE_MISC_TEXTURECUBE,
  mf_RESOURCE_MISC_DRAWINDIRECT_ARGS,
  mf_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS,
  mf_RESOURCE_MISC_BUFFER_STRUCTURED,
  mf_RESOURCE_MISC_RESOURCE_CLAMP,
  mf_RESOURCE_MISC_SHARED_KEYEDMUTEX,
  mf_RESOURCE_MISC_GDI_COMPATIBLE,
  mf_RESOURCE_MISC_SHARED_NTHANDLE,
  mf_RESOURCE_MISC_RESTRICTED_CONTENT,
  mf_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE,
  mf_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVER,
  mf_RESOURCE_MISC_GUARDED,
  mf_RESOURCE_MISC_TILE_POOL,
  mf_RESOURCE_MISC_TILED,
  mf_RESOURCE_MISC_HW_PROTECTED
};

/**
 * @brief : Describes parameters that are used to create a device.
 */
typedef enum mf_CREATE_DEVICE_FLAG {
  mf_CREATE_DEVICE_SINGLETHREADED,
  mf_CREATE_DEVICE_DEBUG,
  mf_CREATE_DEVICE_SWITCH_TO_REF,
  mf_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS,
  mf_CREATE_DEVICE_BGRA_SUPPORT,
  mf_CREATE_DEVICE_DEBUGGABLE,
  mf_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY,
  mf_CREATE_DEVICE_DISABLE_GPU_TIMEOUT,
  mf_CREATE_DEVICE_VIDEO_SUPPORT
};

/**
 * @brief : Driver type options.
 */
// enum mf_DRIVER_TYPE {
//   mf_DRIVER_TYPE_UNKNOWN,
//   mf_DRIVER_TYPE_HARDWARE,
//   mf_DRIVER_TYPE_REFERENCE,
//   mf_DRIVER_TYPE_NULL,
//   mf_DRIVER_TYPE_SOFTWARE,
//   mf_DRIVER_TYPE_WARP
// };

/**
 * @brief : Describes the set of features targeted by a the device.
 */

enum mf_FEATURE_LEVEL
{
  mf_FEATURE_LEVEL_9_1 = 0x9100,
  mf_FEATURE_LEVEL_9_2 = 0x9200,
  mf_FEATURE_LEVEL_9_3 = 0x9300,
  mf_FEATURE_LEVEL_10_0 = 0xa000,
  mf_FEATURE_LEVEL_10_1 = 0xa100,
  mf_FEATURE_LEVEL_11_0 = 0xb000
};
/**
 * @brief : Resource data formats, including fully-typed and typeless formats.
            A list of modifiers at the bottom of the page more fully describes 
            each format type.
 */
enum mf_FORMAT {
  mf_FORMAT_UNKNOWN,
  mf_FORMAT_R32G32B32A32_TYPELESS,
  mf_FORMAT_R32G32B32A32_FLOAT,
  mf_FORMAT_R32G32B32A32_UINT,
  mf_FORMAT_R32G32B32A32_SINT,
  mf_FORMAT_R32G32B32_TYPELESS,
  mf_FORMAT_R32G32B32_FLOAT,
  mf_FORMAT_R32G32B32_UINT,
  mf_FORMAT_R32G32B32_SINT,
  mf_FORMAT_R16G16B16A16_TYPELESS,
  mf_FORMAT_R16G16B16A16_FLOAT,
  mf_FORMAT_R16G16B16A16_UNORM,
  mf_FORMAT_R16G16B16A16_UINT,
  mf_FORMAT_R16G16B16A16_SNORM,
  mf_FORMAT_R16G16B16A16_SINT,
  mf_FORMAT_R32G32_TYPELESS,
  mf_FORMAT_R32G32_FLOAT,
  mf_FORMAT_R32G32_UINT,
  mf_FORMAT_R32G32_SINT,
  mf_FORMAT_R32G8X24_TYPELESS,
  mf_FORMAT_D32_FLOAT_S8X24_UINT,
  mf_FORMAT_R32_FLOAT_X8X24_TYPELESS,
  mf_FORMAT_X32_TYPELESS_G8X24_UINT,
  mf_FORMAT_R10G10B10A2_TYPELESS,
  mf_FORMAT_R10G10B10A2_UNORM,
  mf_FORMAT_R10G10B10A2_UINT,
  mf_FORMAT_R11G11B10_FLOAT,
  mf_FORMAT_R8G8B8A8_TYPELESS,
  mf_FORMAT_R8G8B8A8_UNORM,
  mf_FORMAT_R8G8B8A8_UNORM_SRGB,
  mf_FORMAT_R8G8B8A8_UINT,
  mf_FORMAT_R8G8B8A8_SNORM,
  mf_FORMAT_R8G8B8A8_SINT,
  mf_FORMAT_R16G16_TYPELESS,
  mf_FORMAT_R16G16_FLOAT,
  mf_FORMAT_R16G16_UNORM,
  mf_FORMAT_R16G16_UINT,
  mf_FORMAT_R16G16_SNORM,
  mf_FORMAT_R16G16_SINT,
  mf_FORMAT_R32_TYPELESS,
  mf_FORMAT_D32_FLOAT,
  mf_FORMAT_R32_FLOAT,
  mf_FORMAT_R32_UINT,
  mf_FORMAT_R32_SINT,
  mf_FORMAT_R24G8_TYPELESS,
  mf_FORMAT_D24_UNORM_S8_UINT,
  mf_FORMAT_R24_UNORM_X8_TYPELESS,
  mf_FORMAT_X24_TYPELESS_G8_UINT,
  mf_FORMAT_R8G8_TYPELESS,
  mf_FORMAT_R8G8_UNORM,
  mf_FORMAT_R8G8_UINT,
  mf_FORMAT_R8G8_SNORM,
  mf_FORMAT_R8G8_SINT,
  mf_FORMAT_R16_TYPELESS,
  mf_FORMAT_R16_FLOAT,
  mf_FORMAT_D16_UNORM,
  mf_FORMAT_R16_UNORM,
  mf_FORMAT_R16_UINT,
  mf_FORMAT_R16_SNORM,
  mf_FORMAT_R16_SINT,
  mf_FORMAT_R8_TYPELESS,
  mf_FORMAT_R8_UNORM,
  mf_FORMAT_R8_UINT,
  mf_FORMAT_R8_SNORM,
  mf_FORMAT_R8_SINT,
  mf_FORMAT_A8_UNORM,
  mf_FORMAT_R1_UNORM,
  mf_FORMAT_R9G9B9E5_SHAREDEXP,
  mf_FORMAT_R8G8_B8G8_UNORM,
  mf_FORMAT_G8R8_G8B8_UNORM,
  mf_FORMAT_BC1_TYPELESS,
  mf_FORMAT_BC1_UNORM,
  mf_FORMAT_BC1_UNORM_SRGB,
  mf_FORMAT_BC2_TYPELESS,
  mf_FORMAT_BC2_UNORM,
  mf_FORMAT_BC2_UNORM_SRGB,
  mf_FORMAT_BC3_TYPELESS,
  mf_FORMAT_BC3_UNORM,
  mf_FORMAT_BC3_UNORM_SRGB,
  mf_FORMAT_BC4_TYPELESS,
  mf_FORMAT_BC4_UNORM,
  mf_FORMAT_BC4_SNORM,
  mf_FORMAT_BC5_TYPELESS,
  mf_FORMAT_BC5_UNORM,
  mf_FORMAT_BC5_SNORM,
  mf_FORMAT_B5G6R5_UNORM,
  mf_FORMAT_B5G5R5A1_UNORM,
  mf_FORMAT_B8G8R8A8_UNORM,
  mf_FORMAT_B8G8R8X8_UNORM,
  mf_FORMAT_R10G10B10_XR_BIAS_A2_UNORM,
  mf_FORMAT_B8G8R8A8_TYPELESS,
  mf_FORMAT_B8G8R8A8_UNORM_SRGB,
  mf_FORMAT_B8G8R8X8_TYPELESS,
  mf_FORMAT_B8G8R8X8_UNORM_SRGB,
  mf_FORMAT_BC6H_TYPELESS,
  mf_FORMAT_BC6H_UF16,
  mf_FORMAT_BC6H_SF16,
  mf_FORMAT_BC7_TYPELESS,
  mf_FORMAT_BC7_UNORM,
  mf_FORMAT_BC7_UNORM_SRGB,
  mf_FORMAT_AYUV,
  mf_FORMAT_Y410,
  mf_FORMAT_Y416,
  mf_FORMAT_NV12,
  mf_FORMAT_P010,
  mf_FORMAT_P016,
  mf_FORMAT_420_OPAQUE,
  mf_FORMAT_YUY2,
  mf_FORMAT_Y210,
  mf_FORMAT_Y216,
  mf_FORMAT_NV11,
  mf_FORMAT_AI44,
  mf_FORMAT_IA44,
  mf_FORMAT_P8,
  mf_FORMAT_A8P8,
  mf_FORMAT_B4G4R4A4_UNORM,
  mf_FORMAT_P208,
  mf_FORMAT_V208,
  mf_FORMAT_V408,
  mf_FORMAT_FORCE_UINT
};

/**
 * @brief : Texture type ID.
 */
typedef
enum mfTextureType
{
  mf_UNKNOWN_TEXTURE,
  mf_GENERATED_TEXTURE,
  mf_FILE_TEXTURE,
  mf_RENDER_TARGET_TEXTURE,
  mf_DEPTH_STENCIL_TEXTURE
};
/**
 * @brief : 
 */
enum mf_PRIMITIVE_TOPOLOGY {
  mf_PRIMITIVE_TOPOLOGY_UNDEFINED = 0,
  mf_PRIMITIVE_TOPOLOGY_POINTLIST = 1,
  mf_PRIMITIVE_TOPOLOGY_LINELIST = 2,
  mf_PRIMITIVE_TOPOLOGY_LINESTRIP = 3,
  mf_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4,
  mf_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5,
  mf_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10,
  mf_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11,
  mf_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12,
  mf_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13,
  mf_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 33,
  mf_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 34,
  mf_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 35,
  mf_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 36,
  mf_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 37,
  mf_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 38,
  mf_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 39,
  mf_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 40,
  mf_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 41,
  mf_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 42,
  mf_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 43,
  mf_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 44,
  mf_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 45,
  mf_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 46,
  mf_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 47,
  mf_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 48,
  mf_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 49,
  mf_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 50,
  mf_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 51,
  mf_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 52,
  mf_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 53,
  mf_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 54,
  mf_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 55,
  mf_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 56,
  mf_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 57,
  mf_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 58,
  mf_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 59,
  mf_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 60,
  mf_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 61,
  mf_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 62,
  mf_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 63,
  mf_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 64
};

/**
 * @brief : 
 */
enum mf_DSV_DIMENSION
{
  mf_DSV_DIMENSION_UNKNOWN = 0,
  mf_DSV_DIMENSION_TEXTURE1D = 1,
  mf_DSV_DIMENSION_TEXTURE1DARRAY = 2,
  mf_DSV_DIMENSION_TEXTURE2D = 3,
  mf_DSV_DIMENSION_TEXTURE2DARRAY = 4,
  mf_DSV_DIMENSION_TEXTURE2DMS = 5,
  mf_DSV_DIMENSION_TEXTURE2DMSARRAY = 6
};

/**
 * @brief : 
 */
enum mf_FILTER
{
  mf_FILTER_MIN_MAG_MIP_POINT = 0,
  mf_FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x1,
  mf_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
  mf_FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x5,
  mf_FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x10,
  mf_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
  mf_FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x14,
  mf_FILTER_MIN_MAG_MIP_LINEAR = 0x15,
  mf_FILTER_ANISOTROPIC = 0x55,
  mf_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x80,
  mf_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
  mf_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
  mf_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
  mf_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
  mf_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
  mf_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
  mf_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
  mf_FILTER_COMPARISON_ANISOTROPIC = 0xd5
};

/**
 * @brief : 
 */
enum mf_TEXTURE_ADDRESS_MODE
{
  mf_TEXTURE_ADDRESS_WRAP = 1,
  mf_TEXTURE_ADDRESS_MIRROR = 2,
  mf_TEXTURE_ADDRESS_CLAMP = 3,
  mf_TEXTURE_ADDRESS_BORDER = 4,
  mf_TEXTURE_ADDRESS_MIRROR_ONCE = 5
};

/**
 * @brief : 
 */
enum mf_COMPARISON_FUNC
{
  mf_COMPARISON_NEVER = 1,
  mf_COMPARISON_LESS = 2,
  mf_COMPARISON_EQUAL = 3,
  mf_COMPARISON_LESS_EQUAL = 4,
  mf_COMPARISON_GREATER = 5,
  mf_COMPARISON_NOT_EQUAL = 6,
  mf_COMPARISON_GREATER_EQUAL = 7,
  mf_COMPARISON_ALWAYS = 8
};
/**
 * @brief : 
 */
enum mf_DRIVER_TYPE
{
  mf_DRIVER_TYPE_UNKNOWN = 0,
  mf_DRIVER_TYPE_HARDWARE = (mf_DRIVER_TYPE_UNKNOWN + 1),
  mf_DRIVER_TYPE_REFERENCE = (mf_DRIVER_TYPE_HARDWARE + 1),
  mf_DRIVER_TYPE_NULL = (mf_DRIVER_TYPE_REFERENCE + 1),
  mf_DRIVER_TYPE_SOFTWARE = (mf_DRIVER_TYPE_NULL + 1),
  mf_DRIVER_TYPE_WARP = (mf_DRIVER_TYPE_SOFTWARE + 1)
};

/**
 * @brief : 
 */
enum mf_CULL_MODE
{
  mf_CULL_NONE = 1,
  mf_CULL_FRONT = 2,
  mf_CULL_BACK = 3
};

/**
 * @brief : 
 */
enum mf_FILL_MODE
{
  mf_FILL_WIREFRAME = 2,
  mf_FILL_SOLID = 3
};

/**
 * @brief  USEFULL MACROS
 */
#if !defined(SAFE_RELEASE)
  #define SAFE_RELEASE(x) if(x != NULL) x->Release(); x = NULL;
#endif

#if defined(_DEBUG)
#define mfOutputLOG(_ClassName, _FunctionName, _OutputMessage)		\
OutputDebugStringA(_ClassName);											              \
OutputDebugStringA(" : In Function : ");								          \
OutputDebugStringA(_FunctionName);										            \
OutputDebugStringA(" : ");												                \
OutputDebugStringA(_OutputMessage);										            \
OutputDebugStringA("\n");

#endif
/**
 * @brief : Window dimensions.
 */

#define SCREEN_WIDTH 1000
#define SCREEN_HEIGHT 640

#define mf_FLOAT32_MAX	( 3.402823466e+38f )
#define mf_PI               3.141592654f
#define mf_2PI              6.283185307f
#define mf_1DIVPI           0.318309886f
#define mf_1DIV2PI          0.159154943f
#define mf_PIDIV2           1.570796327f
#define mf_PIDIV4           0.785398163f